#!/bin/bash
###################################################################
# Copyright (C) 2015 Instituto CERTI Amazonia
# All Rights Reserved
###################################################################

#fail fast, fail hard
set -e

RCol='\e[0m'
Bla='\e[0;30m'
Red='\e[0;31m'
Gre='\e[0;32m'
Yel='\e[0;33m'
Blu='\e[0;34m'
Pur='\e[0;35m'
Cya='\e[0;36m'
Whi='\e[0;37m'
MINFO="${Yel}INFO:${RCol}"
MWARNING="${Red}WARNING:${RCol}"
MRUNNING="${Blu}RUNNING:${RCol}"
MCSTART="${Gre}"
MCEND="${RCol}"


SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"
PROJECT_HOME="$( cd $SCRIPT_HOME/../.. && pwd )"

DOCKERIMAGE_RAILS="gumaestri/rails"
DOCKERCONTAINER_RAILS="rails"
DOCKERIMAGE_MONGODB="gumaestri/mongodb"
DOCKERCONTAINER_MONGODB="mongodb"
DOCKERIMAGE_MYSQL="gumaestri/mysql"
DOCKERCONTAINER_MYSQL="mysql"

#
# function dev is intended for developers to be aber to work on code with shared project folders
#
function dev (){
	case "$2" in
  rails-mysql)
    echo -e "${MINFO} Starting rails and mysql containers"
    local code_string='docker run --name '$DOCKERCONTAINER_RAILS' -it
    --publish 3000:3000 --link '$DOCKERCONTAINER_MONGODB':mongodb --volume
    '$PROJECT_HOME':/var/apps --entrypoint="/bin/bash" '$DOCKERIMAGE_RAILS
    echo -e "${MRUNNING}\n${MCSTART}${code_string}${MCEND}"
    echo -e "${MWARNING} /var/apps is SHARED by a volume with your host. BE
    AWARE that this can have side effects."
    echo -e "${MWARNING} Docker Container is uses --entrypoint=\"/bin/bash\"."
    echo -e "${MCSTART}/rails.sh${MCEND}"
    echo -e ""
    ${code_string}
  ;;
	rails-mongo)
		echo -e "${MINFO} Starting rails and mongo containers"
		start_mongodb
		sleep 3
		echo -e "${MINFO} Starting"
		local code_string='docker run --name '$DOCKERCONTAINER_RAILS' -it --publish 3000:3000 --link '$DOCKERCONTAINER_MONGODB':mongodb --volume '$PROJECT_HOME':/var/apps --entrypoint="/bin/bash" '$DOCKERIMAGE_RAILS
		echo -e "${MRUNNING}\n${MCSTART}${code_string}${MCEND}"
		echo -e "${MWARNING} /var/apps is SHARED by a volume with your host. BE AWARE that this can have side effects."
		echo -e "${MWARNING} Docker Container is uses --entrypoint=\"/bin/bash\"."
		echo -e "${MCSTART}/rails.sh${MCEND}"
		echo -e ""
		${code_string}
		;;
	rails-mysql-mongo)
		echo -e "${MINFO} Starting dasboard containers"
		start_mongodb
		sleep 3
		start_mysql
		sleep 3
		echo -e "${MINFO} Starting"
		local code_string='docker run --name '$DOCKERCONTAINER_RAILS' -it
    --publish 3000:3000 --link '$DOCKERCONTAINER_MONGODB':mongodb --link '$DOCKERCONTAINER_MYSQL':mysql --volume '$PROJECT_HOME':/var/apps --entrypoint="/bin/bash" '$DOCKERIMAGE_RAILS
		echo -e "${MRUNNING}\n${MCSTART}${code_string}${MCEND}"
		echo -e "${MWARNING} /var/apps is SHARED by a volume with your host. BE AWARE that this can have side effects."
		echo -e "${MWARNING} Docker Container is uses --entrypoint=\"/bin/bash\"."
		echo -e "${MCSTART}/rails.sh${MCEND}"
		echo -e ""
		${code_string}
		;;
	*)
		echo -e "${MWARNING} What do you want to develop? Valid options:
    rails-mysql, rails-mongo, rails-mysql-mongo"
		exit 1
	esac
}





#start function demonstation purposes
function start (){
	case "$2" in
	user-events)
		echo -e "${MINFO} Starting user-events"
		start_mongodb
		sleep 5
		start_user-events
		;;
	dashboard)
		echo -e "${MINFO} Starting dashboard"
		start_mongodb
		start_mysql
		sleep 5
		start_dashboard
		;;
	mongodb)
		echo -e "${MINFO} Starting mongodb"
		start_mongodb
		;;
	mysql)
		echo -e "${MINFO} Starting mysql"
		start_mysql
		;;
	*)
		echo -e "${MINFO} Available options: user-events, dashboard, mongodb, mysql"
		exit 1
	esac
}

function start_user-events (){
	retval=$( docker_container_check "${DOCKERCONTAINER_RAILS}" )
	if [ "$retval" == "exited" ]
	then
		echo -e "${MINFO} ${DOCKERCONTAINER_RAILS} existed, trying to restart"
		docker start $DOCKERCONTAINER_RAILS
	fi

	if [ "$retval" == "running" ]
	then
		echo -e "${MINFO} ${DOCKERCONTAINER_RAILS} already running, doing nothing"
	fi

	if [ "$retval" == "" ]
	then
		local code_string="docker run --name ${DOCKERCONTAINER_RAILS} -p 8080:8080 -p 3000:3000 -e RAILS_ENV=production --link ${DOCKERCONTAINER_MONGODB}:mongodb -d ${DOCKERIMAGE_RAILS}"
		echo -e "${MRUNNING}\n${MCSTART}${code_string}${MCEND}"
		RAILSENV=$(${code_string})
		echo -e "${MINFO} Started ${DOCKERCONTAINER_RAILS} in container $RAILSENV"
		#wait_for_composer_ready
	fi
}

function start_dashboard (){
	retval=$( docker_container_check "${DOCKERCONTAINER_RAILS}" )
	if [ "$retval" == "exited" ]
	then
		echo -e "${MINFO} ${DOCKERCONTAINER_RAILS} existed, trying to restart"
		docker start $DOCKERCONTAINER_RAILS
	fi

	if [ "$retval" == "running" ]
	then
		echo -e "${MINFO} ${DOCKERCONTAINER_RAILS} already running, doing nothing"
	fi

	if [ "$retval" == "" ]
	then
		local code_string="docker run --name ${DOCKERCONTAINER_RAILS} -p 8081:8081 -p 3001:3001 -e RAILS_ENV=production --link ${DOCKERCONTAINER_MONGODB}:mongodb --link ${DOCKERCONTAINER_MYSQL}:mysql -d ${DOCKERIMAGE_RAILS}"
		echo -e "${MRUNNING}\n${MCSTART}${code_string}${MCEND}"
		RAILSENV=$(${code_string})
		echo -e "${MINFO} Started ${DOCKERCONTAINER_RAILS} in container $RAILSENV"
		#wait_for_composer_ready
	fi
}

function start_mongodb (){
	retval=$( docker_container_check "${DOCKERCONTAINER_MONGODB}" )
	if [ "$retval" == "exited" ]
	then
		echo -e "${MINFO} ${DOCKERCONTAINER_MONGODB} already exists, trying to resume from existed state"
		docker start $DOCKERCONTAINER_MONGODB
	fi

	if [ "$retval" == "" ]
	then
		# -v /tmp/mysql_datadir:/var/lib/mysql
		local code_string="docker run --name ${DOCKERCONTAINER_MONGODB} -p 27018:27017 -d ${DOCKERIMAGE_MONGODB}"
		echo -e "${MRUNNING}\n${MCSTART}${code_string}${MCEND}"
		MYSQLDB=$(${code_string})
		echo -e "${MINFO} Started ${DOCKERCONTAINER_MONGODB} in container $MYSQLDB"
	fi

	if [ "$retval" == "running" ]
	then
		echo -e "${MINFO} ${DOCKERCONTAINER_MONGODB} already running, doing nothing"
	fi
}

function start_mysql (){
	retval=$( docker_container_check "${DOCKERCONTAINER_MYSQL}" )
	if [ "$retval" == "exited" ]
	then
		echo -e "${MINFO} ${DOCKERCONTAINER_MYSQL} already exists, trying to resume from existed state"
		docker start $DOCKERCONTAINER_MYSQL
	fi

	if [ "$retval" == "" ]
	then
		# -v /tmp/mysql_datadir:/var/lib/mysql
		local code_string="docker run --name ${DOCKERCONTAINER_MYSQL} -p 3307:3306 -e MYSQL_ROOT_PASSWORD=ilikerandompasswords -d ${DOCKERIMAGE_MYSQL}"
		echo -e "${MRUNNING}\n${MCSTART}${code_string}${MCEND}"
		MYSQLDB=$(${code_string})
		echo -e "${MINFO} Started ${DOCKERCONTAINER_MYSQL} in container $MYSQLDB"
	fi

	if [ "$retval" == "running" ]
	then
		echo -e "${MINFO} ${DOCKERCONTAINER_MYSQL} already running, doing nothing"
	fi
}

function jenkins (){
	case "$2" in
	start)
		jenkins_start $@
		;;
	test)
		jenkins_test $@
		;;
	*)
		echo -e "${MINFO} Available options: start, test"
		exit 1
	esac
}

#start stuff for jenkins without forwarded ports
function jenkins_start (){
	case "$3" in
	server)
		echo -e "${MINFO} Starting server containers"
		start_server
		;;
	*)
		echo -e "${MINFO} Available options: server"
		exit 1
	esac
}

# script doe starting the containers isolated, running the test scrips inside and pulling the reports afterwards
function jenkins_test (){
	case "$3" in
	server)
		cd $PROJECT_HOME
		echo "trying to run server tests..."
		set +e
		docker exec -i $DOCKERCONTAINER_server /bin/bash -c "pwd"
		set -e
		echo "trying to pull results from container $DOCKERCONTAINER_SERVER"
		#mkdir -p reports
		#docker cp $DOCKERCONTAINER_COMPOSER:/var/apps/reports .
		;;
	*)
		echo -e "${MINFO} Available options: server"
		exit 1
	esac
}

# jenkins version, dont exposes ports to outside (localhost)
function jenkins_start_server (){
	local code_string="docker run --name ${DOCKERCONTAINER_SERVER} -d ${DOCKERIMAGE_SERVER}"
	echo -e "${MRUNNING}\n${MCSTART}${code_string}${MCEND}"
	RAILSENV=$(${code_string})
	echo -e "${MINFO} Started ${DOCKERCONTAINER_SERVER} in container $RAILSENV"
}

# helper function to check the docker container status. arg $1 is should be the name
function docker_container_check (){
	CONTAINER=$1
	retval=""
	id=`docker ps -a -f name=$CONTAINER -q`
	if [ ! -z "$id" ]; then
        # Container CONTAINER exists"
        retval="exists"
    	# Container exists, checking status
		id=`docker ps -af status=exited -f name=$CONTAINER -q`
		if [ ! -z "$id" ]; then
	        # Container is exited"
	        retval="exited"
		fi
		id=`docker ps -af status=paused -f name=$CONTAINER -q`
		if [ ! -z "$id" ]; then
	        # Container is exited"
	        retval="paused"
		fi
		id=`docker ps -af status=running -f name=$CONTAINER -q`
		if [ ! -z "$id" ]; then
	        # Container is exited"
	        retval="running"
		fi
	fi
	echo "$retval"
}


function build (){
	cd $PROJECT_HOME
	echo -e "${MINFO} Workdir is:" + $(pwd)

	case "$2" in
	user-events)
		echo -e "${MINFO} Building server container"
		build_user-events @@
		;;
	dashboard)
		echo -e "${MINFO} Building server container"
		build_dashboard @@
		;;
	mysql)
		echo -e "${MINFO} Building mysql container"
		build_mysql @@
		;;
	mongodb)
		echo -e "${MINFO} Building mongodb container"
		build_mongodb @@
		;;
	*)
		echo -e "${MINFO} Valid inutpt: user-events, dashboard, mysql, mongodb"
		RETVAL=1
	esac
	echo -e "${MINFO} Building Docker Images done"
}

function build_user-events(){
	#
	# copy dependencies for caching
	#
	set +e
	mkdir -p config/environment/docker/user-events/cache_gems
	cmp user-events/Gemfile config/environment/docker/user-events/cache_gems/Gemfile || cp -Rvf user-events/Gemfile config/environment/docker/user-events/cache_gems/Gemfile
	cmp user-events/Gemfile.lock config/environment/docker/user-events/cache_gems/Gemfile.lock || cp -Rvf user-events/Gemfile.lock config/environment/docker/user-events/cache_gems/Gemfile.lock
	
	mkdir -p config/environment/docker/user-events/cache_npm
	cmp user-events-frontend/package.json config/environment/docker/user-events/cache_npm/package.json || cp -Rvf user-events-frontend/package.json config/environment/docker/user-events/cache_npm/package.json

	#
	#copy the code
	#
	rm -fr config/environment/docker/server/cache_user-events;rsync -av user-events/ config/environment/docker/user-events/cache_user-events --exclude attachments --exclude bower_components --exclude tmp
	rm -fr config/environment/docker/server/cache_user-events-frontend;rsync -av user-events-frontend/ config/environment/docker/user-events/cache_user-events-frontend --exclude attachments --exclude bower_components --exclude tmp
	

	set -e
	# actual server build
	docker build -t $DOCKERIMAGE_RAILS config/environment/docker/user-events
}

function build_dashboard(){
	#
	# copy dependencies for caching
	#
	set +e
	mkdir -p config/environment/docker/dashboard/cache_gems
	cmp dev/apps/dashboard/Gemfile config/environment/docker/dashboard/cache_gems/Gemfile || cp -Rvf dev/apps/dashboard/Gemfile config/environment/docker/dashboard/cache_gems/Gemfile
	cmp dev/apps/dashboard/Gemfile.lock config/environment/docker/dashboard/cache_gems/Gemfile.lock || cp -Rvf dev/apps/dashboard/Gemfile.lock config/environment/docker/dashboard/cache_gems/Gemfile.lock
	
	mkdir -p config/environment/docker/dashboard/cache_npm
	cmp dev/apps/dashboard-frontend/package.json config/environment/docker/dashboard/cache_npm/package.json || cp -Rvf dev/apps/dashboard-frontend/package.json config/environment/docker/dashboard/cache_npm/package.json

	#
	#copy the code
	#
	rm -fr config/environment/docker/server/cache_dashboard;rsync -av dev/apps/dashboard/ config/environment/docker/dashboard/cache_dashboard --exclude attachments --exclude bower_components --exclude tmp
	rm -fr config/environment/docker/server/cache_dashboard-frontend;rsync -av dev/apps/dashboard-frontend/ config/environment/docker/dashboard/cache_dashboard-frontend --exclude attachments --exclude bower_components --exclude tmp
	

	set -e
	# actual server build
	echo -e "docker build -t ${DOCKERIMAGE_RAILS} config/environment/docker/dashboard"
	docker build -t $DOCKERIMAGE_RAILS config/environment/docker/dashboard
}

function build_mongodb(){
	#
	# build mongodn container
	#
	docker build -t $DOCKERIMAGE_MONGODB config/environment/docker/mongodb
}

function build_mysql(){
	#
	# build MYSQL container
	#
	docker build -t $DOCKERIMAGE_MYSQL config/environment/docker/mysqldb
}

#
# script for running tests asuming the whole environment is ready, e.g. inside a docker container or locally
#
function test (){
	cd $PROJECT_HOME
	echo "function test"
	mkdir -p reports

	case "$2" in
	server)
		echo -e "${MINFO} Running tests for server"
		test_server $@
		;;
	*)
		echo -e "${MINFO} Valid input: server"
		RETVAL=1
	esac
}

function test_server (){
	echo -e "${MINFO} function test_server ()"

	case "$3" in
	unit)
		test_server_unit $@
		;;
	integration)
		test_server_integration $@
		;;
	*)
		echo -e "${MINFO} Available options: unit, integration"
		exit 1
	esac
}


function test_server_unit (){
	echo -e "${MINFO} Running unittests now..."
	set +e
	cd $PROJECT_HOME
	
	set -e
}

function test_server_integration (){
	echo -e "${MINFO} Running integration tests now..."
	set +e
	cd $PROJECT_HOME
	
	set -e
}


function package (){
	#create turn-key deliveries
	set -e
	rm -fr deliveries
	mkdir -p deliveries
	set +e
	case "$2" in
	docker)
		package_docker $@
		;;
	*)
		echo -e "${MINFO} Available: docker"
		RETVAL=1
	esac
}

function package_docker(){
	echo -e "${MINFO} Exporting all docker images..."
	set -e
	echo -e "${MINFO} Exporting ${DOCKERIMAGE_SERVER} docker image"
	docker save $DOCKERIMAGE_SERVER > deliveries/dockerimage-server.tar
	echo -e "${MINFO} Exporting of docker images done"
	set +e
}

#
#
# UTIL functions
#
#

function clean (){
	#removing dangling images
	echo -e "${MINFO} Removing dangling images..."
	ids=`docker images -q -f dangling=true`
	if [ ! -z "$ids" ]; then
        docker rmi -f $(docker images -q -f dangling=true) || echo -e "${MINFO} Removed dangling images."
	fi
}

function checkenv (){
	hostname=`hostname`
	if [ "$hostname" == "dockerhost" ];
	then
		echo ""
	  else
	  	echo ""
	    #echo -e '\e[0;31mWARNING: \e[0m It seems you are not in vagrant, something is wrong...'
	    #exit 1
	fi
}

function wait_for_server_ready (){
	echo "function wait_for_server_ready"
	echo "waiting for ${DOCKERCONTAINER_SERVER} container to be \"ready\""
	# IP=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' ${DOCKERCONTAINER_SERVER})
	# echo -e "${MRUNNING}\n${MCSTART}curl -s $IP:3300 -L | grep -q Sensible${MCEND}"
	# date
	# until $(curl -s $IP:3300 -L | grep -q Sensible); do
	#    echo "."
	#    sleep 5
	# done
	# sleep 10
	# date
	# echo -e "copying scripts to container"
	# docker cp scripts ${DOCKERCONTAINER_SERVER}:/var/apps/
	# echo "composer website seems to be up at:"
	# echo "$IP:3300"
	echo "docker exec -it ${DOCKERCONTAINER_SERVER} /bin/bash"
}

function helptext(){
	echo $"Usage of $0: {start|jenkins|package|test|stop|clean|kill|restart (-f)|dev|build}"
}

#
#	function to filter output to make console output more readable, flag is set by function setVerbose
#
function filteredPrint (){
	echo "$verbose"
	if [ $verbose ]
	then
	   	echo -e $1
	fi
}

#
#	function to delete the docker containers for the project
#
function killz (){
	set +e
	case "$2" in
	user-events)
		docker rm -f $DOCKERCONTAINER_RAILS || echo -e "${MINFO} killing ${DOCKERCONTAINER_RAILS}"
		;;
	dashboard)
		docker rm -f $DOCKERCONTAINER_RAILS || echo -e "${MINFO} killing ${DOCKERCONTAINER_RAILS}"
		;;
	mongodb)
		docker rm -f $DOCKERCONTAINER_MONGODB || echo -e "${MINFO} killing ${DOCKERCONTAINER_MONGODB}"
		;;
	mysql)
		docker rm -f $DOCKERCONTAINER_MYSQL || echo -e "${MINFO} killing ${DOCKERCONTAINER_MYSQL}"
		;;
	all)
		docker rm -f $DOCKERCONTAINER_RAILS || echo -e "${MINFO} killing ${DOCKERCONTAINER_RAILS}"
		docker rm -f $DOCKERCONTAINER_RAILS || echo -e "${MINFO} killing ${DOCKERCONTAINER_RAILS}"
		docker rm -f $DOCKERCONTAINER_MONGODB || echo -e "${MINFO} killing ${DOCKERCONTAINER_MONGODB}"
		docker rm -f $DOCKERCONTAINER_MYSQL || echo -e "${MINFO} killing ${DOCKERCONTAINER_MYSQL}"
		;;
	*)
		echo "Valid input: user-events, dashboard, mongodb,mysql, all"
	esac
	set -e
}

#
#	function to test some new developed features, just for testing purposes
#
function debugscript (){
	echo "Devenv-inner here:"
	echo "$SCRIPT_HOME"
	echo "$PROJECT_HOME"
	echo "test(): total args passed to me $#"
	echo "test(): all args (\$@) passed to me -\"$@\""
	filteredPrint "test1"
	echo "always"
	filteredPrint "test2"
}

#
#	helper function to set the verbose flag that is used in functon filteredPrint
#
function setVerbose (){
	if [[ $@ == *"verbose"* ]]
	then
		echo "Verbose arg detected"
	   	verbose=true
	fi
}

function stop (){
	echo -e "${MINFO} Stopping all docker containers:"
	ids=`docker ps -q`
	if [ ! -z "$ids" ]; then
        docker stop $ids
	fi
}

#
# UTIL functions end
#



checkenv
setVerbose $@

#echo "Devenv-inner with: "$@

# forwarding other args($@) to functions just in case
case "$1" in
	restart)
		if [ "$2" == "-f" ];then
			echo -e "${MINFO} force restart, killing containers for good"
			killz $@
		fi
		stop $@
		start $@
		;;
	start)
		start $@
		;;
	jenkins)
		jenkins $@
		;;
	stop)
		stop $@
		;;
	kill)
		killz $@
		;;
	build)
		build $@
		;;
	test)
		test $@
		;;
	debugscript)
		debugscript $@
		;;
	clean)
		clean $@
		;;
	package)
		package $@
		;;
	dev)
		dev $@
		;;
	help | man | "")
		helptext
		;;
	*)
		helptext
		RETVAL=1
esac
